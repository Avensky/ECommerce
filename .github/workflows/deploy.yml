name: Automated deployment

on:
  workflow_dispatch:
  push:
    branches:    
      - main
  pull_request:
    branches:
      - main

jobs: 
#   backend:
#     runs-on: self-hosted

#     steps:
#     - name: Checkout to the repository
#       uses: actions/checkout@v3

#     - name: Set up NodeJS environment
#       uses: actions/setup-node@v3
#       with:
#         node-version: 19.2.0

#     - name: Cache node modules
#       id: cache-backend
#       uses: actions/cache@v3
#       env:
#         cache-name: cache-node-modules
#       with:
#         path: node_modules
#         key: ${{runner.os}}-backend-${{ env.cache-name }}-${{ hashFiles('package-lock.json')}}
#         restore-keys: |
#           ${{ runner.os }}-backend-${{ env.cache-name }}-
#           ${{ runner.os }}-backend-
#           ${{ runner.os }}-

#     - name: Install Dependencies
#       if: steps.cache-backend.outputs.cache-hit != 'true'
#       run: npm ci

#     - name: Check linting and formatting
#       run: npm run lint

#     - name: Execute test cases
#       run: echo testing...

#   frontend:
#     needs: backend
#     runs-on: self-hosted

#     steps:
#     - name: Checkout to the repository
#       uses: actions/checkout@v3
    
#     - name: Set up NodeJS environment
#       uses: actions/setup-node@v3
#       with:
#         node-version: 19.2.0

#     - name: Cache node modules
#       id: cache-frontend
#       uses: actions/cache@v3
#       env:
#         cache-name: cache-node-modules
#       with:
#         path: frontend/node_modules
#         key: ${{runner.os}}-frontend-${{env.cache-name}}-${{ hashFiles('frontend/package-lock.json')}}
#         restore-keys: |
#           ${{ runner.os }}-frontend-${{ env.cache-name }}
#           ${{ runner.os }}-frontend-
#           ${{ runner.os }}-

#     - name: Install Dependencies
#       if: steps.cache-frontend.outputs.cache-hit !='true'
#       run: |
#           cd frontend
#           npm ci

#     - name: Check linting and formatting
#       run: |
#         cd frontend
#         npm run lint

#   build:
#     needs: frontend
#     runs-on: self-hosted
#     steps:
    
#     - name: Checkout to the repository
#       uses: actions/checkout@v3
    
#     - name: Set up NodeJS environment
#       uses: actions/setup-node@v3
#       with:
#         node-version: 19.2.0

#     - name: Use cache node modules
#       uses: actions/cache@v3
#       with:
#         path: |
#           node_modules
#           frontend/node_modules
#         key: |
#           backend-cache-backend-${{ hashFiles('package-lock.json')}}
#           frontend-cache-frontend-${{ hashFiles('frontend/package-lock.json')}}

#     - name: Install Dependencies
#       run: |
#           npm ci
#           cd frontend
#           npm ci

#     - name: Create production build
#       run: |
#         cd frontend
#         npm run build

#     - name: Execute cypress test cases
#       uses: cypress-io/github-action@v5.1.0
#       with:
#         start: |
#           npm run dev
#         # wait-on: 'http://localhost:3000'
#         # wait-on-timeout: 120
#         # command: |
#         #   cd frontend
#         #   npm run test

#   restartServer:
#     needs: build
#     runs-on: self-hosted
#     steps:
#     - run: |
#         pm2 stop ECommerce
#         pm2 start ECommerce --update-env
#         pm2 save
#         sudo service nginx restart

  deploy:
    runs-on: self-hosted

    steps:
    - name: Checkout to the repository
      uses: actions/checkout@v3

    - name: Set up NodeJS environment
      uses: actions/setup-node@v3
      with:
        node-version: 19.2.0

    - name: Execute cypress test cases
      uses: cypress-io/github-action@v5.1.0
      with:
        start: |
          npm ci
          npm run lint
          cd frontend
          npm ci
          npm run lint
          npm run build
          cd ..
          npm run server

      # wait-on: 'http://localhost:3000'
      # wait-on-timeout: 120
      # command: |
      #   cd frontend
      #   npm run test

  restartServer:
    needs: build
    runs-on: self-hosted
    steps:
    - run: |
        pm2 stop ECommerce
        pm2 start ECommerce --update-env
        pm2 save
        sudo service nginx restart